import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import backgroundImage from '../assets/image.png';
import './AdminPage.css';

const AdminPage = ({ onLogout }) => {
  const navigate = useNavigate();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [username, setUsername] = useState('');
  const [showAccountForm, setShowAccountForm] = useState(false);
  const [showAddAccountForm, setShowAddAccountForm] = useState(false);
  const [showEditAccountForm, setShowEditAccountForm] = useState(false); // New state for edit form
  const [editUser, setEditUser] = useState(null); // Store the user being edited
  const [users, setUsers] = useState([
    {
      id: 1,
      image: 'https://via.placeholder.com/50',
      name: 'Nguy·ªÖn VƒÉn A',
      email: 'nguyenvana@example.com',
      phone: '0123456789',
      password: 'password123',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 2,
      image: 'https://via.placeholder.com/50',
      name: 'Tr·∫ßn Th·ªã B',
      email: 'tranthib@example.com',
      phone: '0987654321',
      password: 'password456',
      isActive: false,
      isLocked: true,
      role: 'Admin',
    },
    {
      id: 3,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 4,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 5,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 6,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 7,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 8,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 9,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
    {
      id: 10,
      image: 'https://via.placeholder.com/50',
      name: 'T√™n m·ªõi',
      email: 'emailmoi@example.com',
      phone: '0123456789',
      password: 'newpassword',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    },
  ]);
  const [searchTerm, setSearchTerm] = useState('');
  const [newUser, setNewUser] = useState({
    image: 'https://via.placeholder.com/50',
    name: '',
    email: '',
    phone: '',
    password: '',
    isActive: true,
    isLocked: false,
    role: 'Kh√°ch H√†ng',
  });

  useEffect(() => {
    const isLoggedIn = localStorage.getItem('isLoggedIn');
    const role = localStorage.getItem('role');
    const storedUsername = localStorage.getItem('username');

    if (!isLoggedIn) {
      navigate('/login');
    } else if (role !== 'Admin') {
      navigate('/');
    } else {
      setUsername(storedUsername || 'Ng∆∞·ªùi d√πng');
    }
  }, [navigate]);

  const handleLogout = () => {
    onLogout();
    navigate('/login');
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const handleShowAccountForm = () => {
    setShowAccountForm(true);
  };

  const handleCloseAccountForm = () => {
    setShowAccountForm(false);
  };

  const handleShowAddAccountForm = () => {
    setShowAddAccountForm(true);
  };

  const handleCloseAddAccountForm = () => {
    setShowAddAccountForm(false);
    setNewUser({
      image: 'https://via.placeholder.com/50',
      name: '',
      email: '',
      phone: '',
      password: '',
      isActive: true,
      isLocked: false,
      role: 'Kh√°ch H√†ng',
    });
  };

  const handleImageChange = (e, setUserFunction, user) => {
    const file = e.target.files[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setUserFunction({ ...user, image: imageUrl });
    }
  };

  const handleAddAccount = (e) => {
    e.preventDefault();
    const newUserData = {
      id: users.length + 1,
      image: newUser.image,
      name: newUser.name,
      email: newUser.email,
      phone: newUser.phone,
      password: newUser.password,
      isActive: newUser.isActive,
      isLocked: newUser.isLocked,
      role: newUser.role,
    };
    setUsers([...users, newUserData]);
    handleCloseAddAccountForm();
  };

  const handleShowEditAccountForm = (user) => {
    setEditUser(user); // Set the user to be edited
    setShowEditAccountForm(true); // Show the edit form
  };

  const handleCloseEditAccountForm = () => {
    setShowEditAccountForm(false);
    setEditUser(null); // Clear the user being edited
  };

  const handleEditAccount = (e) => {
    e.preventDefault();
    setUsers(
      users.map((user) =>
        user.id === editUser.id ? { ...editUser } : user
      )
    );
    handleCloseEditAccountForm();
  };

  const handleLockAccount = (id) => {
    setUsers(
      users.map((user) =>
        user.id === id
          ? { ...user, isLocked: !user.isLocked, isActive: user.isLocked }
          : user
      )
    );
  };

  const handleDeleteAccount = (id) => {
    setUsers(users.filter((user) => user.id !== id));
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const filteredUsers = users.filter(
    (user) =>
      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="admin-page">
      {/* Header */}
      <div className="header">
        <div className="logo">AUTOLOT</div>
        <div className="header-icons">
          <span className="icon">üîç</span>
          <span className="icon">üîî</span>
          <div className="user-profile" onClick={toggleDropdown}>
            <span className="user-name">{username}</span>
            <span className="dropdown-arrow">‚ñº</span>
            {isDropdownOpen && (
              <div className="dropdown-menu">
                <button className="logout-option" onClick={handleLogout}>
                  ƒêƒÉng xu·∫•t
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* N·ªôi dung ch√≠nh v·ªõi h√¨nh n·ªÅn inline */}
      <div
        className="main-content"
        style={{
          backgroundImage: `url(${backgroundImage})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          backgroundRepeat: 'no-repeat',
        }}
      >
        {/* Khu v·ª±c ch·ª©c nƒÉng ·ªü g√≥c tr√°i */}
        <div className="function-box">
          <h3>Ch·ª©c nƒÉng</h3>
          <div className="function-item">
            <button className="function-button" onClick={handleShowAccountForm}>
              Qu·∫£n L√Ω T√†i Kho·∫£n
            </button>
          </div>
          <div className="function-item">
            <button className="function-button">Th√™m B√£i ƒê·ªó</button>
          </div>
          <div className="function-item">
            <button className="function-button">X·ª≠ L√Ω Vi Ph·∫°m</button>
          </div>
          <div className="function-item">
            <button className="function-button">Qu·∫£n L√Ω Gi√°</button>
          </div>
          <div className="function-item">
            <button className="function-button">Qu·∫£n L√Ω B√£i ƒê·ªó</button>
          </div>
          <div className="function-item">
            <button className="function-button">Th·ªëng K√™</button>
          </div>
        </div>

        {/* Form Qu·∫£n L√Ω T√†i Kho·∫£n */}
        {showAccountForm && (
          <div className="account-form">
            <div className="account-form-header">
              <h3>Qu·∫£n L√Ω T√†i Kho·∫£n</h3>
              <div className="form-actions">
                <input
                  type="text"
                  placeholder="T√¨m Ki·∫øm..."
                  value={searchTerm}
                  onChange={handleSearch}
                  className="search-input"
                />
                <button className="add-account-button" onClick={handleShowAddAccountForm}>
                  Th√™m T√†i Kho·∫£n
                </button>
                <button className="close-button" onClick={handleCloseAccountForm}>
                  ƒê√≥ng
                </button>
              </div>
            </div>
            <div className="table-container">
              <table className="account-table">
                <thead>
                  <tr>
                    <th>S·ªë Th·ª© T·ª±</th>
                    <th>H√¨nh ·∫¢nh</th>
                    <th>T√™n Kh√°ch H√†ng</th>
                    <th>Lo·∫°i T√†i Kho·∫£n</th>
                    <th>Email</th>
                    <th>S·ªë ƒêi·ªán Tho·∫°i</th>
                    <th>M·∫≠t Kh·∫©u</th>
                    <th>Ho·∫°t ƒê·ªông</th>
                    <th>Ch·ª©c NƒÉng</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredUsers.map((user) => (
                    <tr key={user.id}>
                      <td>{user.id}</td>
                      <td>
                        <img src={user.image} alt={user.name} className="user-image" />
                      </td>
                      <td>{user.name}</td>
                      <td>{user.role}</td>
                      <td>{user.email}</td>
                      <td>{user.phone}</td>
                      <td>{user.password}</td>
                      <td>{user.isActive ? 'C√≥' : 'Kh√¥ng'}</td>
                      <td>
                        <button
                          className="action-icon edit"
                          onClick={() => handleShowEditAccountForm(user)}
                          title="S·ª≠a"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          className="action-icon lock"
                          onClick={() => handleLockAccount(user.id)}
                          title={user.isLocked ? 'M·ªü Kh√≥a' : 'Kh√≥a'}
                        >
                          {user.isLocked ? 'üîì' : 'üîí'}
                        </button>
                        <button
                          className="action-icon delete"
                          onClick={() => handleDeleteAccount(user.id)}
                          title="X√≥a"
                        >
                          üóëÔ∏è
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Form Th√™m T√†i Kho·∫£n */}
        {showAddAccountForm && (
          <div className="add-account-modal">
            <div className="add-account-form">
              <h3>Th√™m T√†i Kho·∫£n M·ªõi</h3>
              <form onSubmit={handleAddAccount}>
                <div className="form-group">
                  <label>H√¨nh ·∫¢nh:</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageChange(e, setNewUser, newUser)}
                  />
                  {newUser.image && (
                    <div className="image-preview">
                      <img src={newUser.image} alt="Preview" />
                    </div>
                  )}
                </div>
                <div className="form-group">
                  <label>T√™n Kh√°ch H√†ng:</label>
                  <input
                    type="text"
                    value={newUser.name}
                    onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    value={newUser.email}
                    onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒêi·ªán Tho·∫°i:</label>
                  <input
                    type="text"
                    value={newUser.phone}
                    onChange={(e) => setNewUser({ ...newUser, phone: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>M·∫≠t Kh·∫©u:</label>
                  <input
                    type="password"
                    value={newUser.password}
                    onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i T√†i Kho·∫£n:</label>
                  <select
                    value={newUser.role}
                    onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
                  >
                    <option value="Kh√°ch H√†ng">Kh√°ch H√†ng</option>
                    <option value="Admin">Admin</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Ho·∫°t ƒê·ªông:</label>
                  <select
                    value={newUser.isActive}
                    onChange={(e) => setNewUser({ ...newUser, isActive: e.target.value === 'true' })}
                  >
                    <option value={true}>C√≥</option>
                    <option value={false}>Kh√¥ng</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Kh√≥a T√†i Kho·∫£n:</label>
                  <select
                    value={newUser.isLocked}
                    onChange={(e) => setNewUser({ ...newUser, isLocked: e.target.value === 'true' })}
                  >
                    <option value={false}>Kh√¥ng</option>
                    <option value={true}>C√≥</option>
                  </select>
                </div>
                <div className="form-actions">
                  <button type="submit" className="submit-button">
                    Th√™m
                  </button>
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={handleCloseAddAccountForm}
                  >
                    H·ªßy
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Form Ch·ªânh S·ª≠a T√†i Kho·∫£n */}
        {showEditAccountForm && editUser && (
          <div className="edit-account-modal">
            <div className="edit-account-form">
              <h3>Ch·ªânh S·ª≠a T√†i Kho·∫£n</h3>
              <form onSubmit={handleEditAccount}>
                <div className="form-group">
                  <label>H√¨nh ·∫¢nh:</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageChange(e, setEditUser, editUser)}
                  />
                  {editUser.image && (
                    <div className="image-preview">
                      <img src={editUser.image} alt="Preview" />
                    </div>
                  )}
                </div>
                <div className="form-group">
                  <label>T√™n Kh√°ch H√†ng:</label>
                  <input
                    type="text"
                    value={editUser.name}
                    onChange={(e) => setEditUser({ ...editUser, name: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    value={editUser.email}
                    onChange={(e) => setEditUser({ ...editUser, email: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒêi·ªán Tho·∫°i:</label>
                  <input
                    type="text"
                    value={editUser.phone}
                    onChange={(e) => setEditUser({ ...editUser, phone: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>M·∫≠t Kh·∫©u:</label>
                  <input
                    type="password"
                    value={editUser.password}
                    onChange={(e) => setEditUser({ ...editUser, password: e.target.value })}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i T√†i Kho·∫£n:</label>
                  <select
                    value={editUser.role}
                    onChange={(e) => setEditUser({ ...editUser, role: e.target.value })}
                  >
                    <option value="Kh√°ch H√†ng">Kh√°ch H√†ng</option>
                    <option value="Admin">Admin</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Ho·∫°t ƒê·ªông:</label>
                  <select
                    value={editUser.isActive}
                    onChange={(e) => setEditUser({ ...editUser, isActive: e.target.value === 'true' })}
                  >
                    <option value={true}>C√≥</option>
                    <option value={false}>Kh√¥ng</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Kh√≥a T√†i Kho·∫£n:</label>
                  <select
                    value={editUser.isLocked}
                    onChange={(e) => setEditUser({ ...editUser, isLocked: e.target.value === 'true' })}
                  >
                    <option value={false}>Kh√¥ng</option>
                    <option value={true}>C√≥</option>
                  </select>
                </div>
                <div className="form-actions">
                  <button type="submit" className="submit-button">
                    L∆∞u
                  </button>
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={handleCloseEditAccountForm}
                  >
                    H·ªßy
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPage;